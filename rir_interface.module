<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\smart_ip\SmartIpLocation;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_insert().
 */
function rir_interface_entity_insert(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        Drupal::cache('render')->deleteAll();

        $mailManager = Drupal::service('plugin.manager.mail');
        $module = 'rir_notifier';
        $key = 'advert_insert_alert';
        $to = $entity->get('field_visit_email_address1')->value;
        $params['message'] = t('Dear @user, we have successfully received your advert. We are validating it before publishing.', ['@user' => $entity->get('field_visit_contact_name')->value]);
        $params['advert_title'] = $entity->label();
        $params['contact_name'] = $entity->get('field_visit_contact_name')->value;
        $langcode = Drupal::currentUser()->getPreferredLangcode();
        $send = TRUE;
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
        if ($result['result'] !== TRUE) {
            $message = t('There was a problem sending alert email to @email for creating advert id: @id.', [
              '@email' => $to,
              '@id' => $entity->id(),
            ]);
            Drupal::logger('rir_interface')->error($message);
            return;
        }
        $message = t('An email notification has been sent to @email for creating advert id: @id.', [
          '@email' => $to,
          '@id' => $entity->id(),
        ]);
        Drupal::logger('rir_interface')->notice($message);
    }
}

/**
 * Implements hook_entity_update().
 */
function rir_interface_entity_update(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        Drupal::cache('render')->deleteAll();
    }
}

/**
 * Implements hook_entity_create().
 */
function rir_interface_entity_create(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        $entity->set('field_advert_reference', generateRandomStr());

        $locationObj = new SmartIpLocation();
        $location = $locationObj->get('city') . ', ' . $locationObj->get('country') . '(' . $locationObj->get('countryCode') . ')';
        $entity->set('field_advert_creator_location', $location);
    }
}

function generateRandomStr() {
    $randomPart = '';
    srand((double) microtime(TRUE) * 1000000);
    $chars = [
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      'A',
      'B',
      'C',
      'D',
      'E',
      'F',
      'G',
      'H',
      'I',
      'J',
      'K',
      'L',
      'M',
      'N',
      'O',
      'P',
      'Q',
      'R',
      'S',
      'T',
      'U',
      'V',
      'W',
      'X',
      'Y',
      'Z',
    ];

    for ($rand = 0; $rand <= 9; $rand++) {
        $random = rand(0, count($chars) - 1);
        $randomPart .= $chars[$random];
    }
    return $randomPart;
}

/**
 * Implements hook_theme().
 */
function rir_interface_theme($existing, $type, $theme, $path) {

    return [
      'rir_copyright' => [
        'variables' => [
          'year' => date('Y'),
          'terms' => t('Terms of use'),
          'privacy' => t('Privacy policy'),
          'admin' => t('Site Management'),
        ],
      ],
      'rir_address' => [
        'variables' => [
          'title' => t('Get in touch'),
        ],
      ],
      'rir_services' => [
        'variables' => [
          'title' => t('Our services'),
        ],
      ],
      'rir_realtime' => [
        'variables' => [
          'title' => t('Realtime Figures'),
          'rent' => 0,
          'sale' => 0,
          'agents' => 0,
          'auctions' => 0,
        ],
      ],
      'rir_advert_details' => [
        'variables' => [
          'advert' => NULL,
        ],
      ],
    ];
}

/**
 * Implements hook_entity_presave().
 */
function rir_interface_entity_presave(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {

        $term = Term::load($entity->get('field_advert_district')->target_id);
        $district = trim(strtolower($term->getName()));
        $sector = trim(strtolower($entity->get('field_advert_sector')->value));
        $village = trim(strtolower($entity->get('field_advert_village')->value));
        $cell = trim(strtolower($entity->get('field_advert_cell')->value));
        $street = trim(strtolower($entity->get('field_advert_street')->value));
        Drupal::logger('rir_interface')->debug('Dis: ' . $district . ', Sect: ' . $sector . ', Vil: ' . $village . ', Str: ' . $street);
        if (!empty($district) and !empty($sector) and !empty($village) and !empty($cell) and !empty($street)){
            $signature = hash('md5', $district . '_' . $sector . '_' . $village . '_' . $cell . '_' . $street);
            $entity->set('field_advert_signature', $signature);
        }

        if ($entity->get('field_advert_currency')->value == 'usd') {
            $response = Unirest\Request::get("https://currency-exchange.p.mashape.com/exchange?from=USD&q=1.0&to=RWF",
              [
                "X-Mashape-Key" => "G9T1txjJzbmshj9pPAEB2d0k79G5p1m3Xjgjsn5PO0gQ09UvDw",
                "Accept" => "text/plain",
              ]
            )->body;
            $converted = $entity->get('field_advert_price')->value * $response;
            $entity->set('field_price_in_rwf', $converted);
        } else {
            $entity->set('field_price_in_rwf', $entity->get('field_advert_price')->value);
        }
    }
}

/**
 * Implements hook_views_query_alter().
 */
function rir_interface_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
    if ($view->storage->get('id') === 'adverts' && $view->current_display === 'block_advert_carousel') {
        $node = Drupal::routeMatch()->getParameter('node');
        if (isset($node)) {
            $advert = Node::load($node->id());
            if ($advert->get('field_advert_posting_plan')->value === 'standard') {
                $query->setLimit(1);
            }
            elseif ($advert->get('field_advert_posting_plan')->value === 'featured') {
                $query->setLimit(5);
            }
            elseif ($advert->get('field_advert_posting_plan')->value === 'full_service') {
                $query->setLimit(10);
            }
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
//function rir_interface_form_node_advert_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//
//    $form['posting_plan_message'] = array(
//      '#type' => 'item',
//      '#markup' => t('Visible images...'),
//      '#weight' => 16
//    );
//}