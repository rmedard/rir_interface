<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\smart_ip\SmartIpLocation;

/**
 * Implements hook_entity_insert().
 */
function rir_interface_entity_insert(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        Drupal::cache('render')->deleteAll();
    }
}

/**
 * Implements hook_entity_update().
 */
function rir_interface_entity_update(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        Drupal::cache('render')->deleteAll();
    }
}

/**
 * Implements hook_entity_create().
 */
function rir_interface_entity_create(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        $entity->set('field_advert_reference', generateRandomStr());

        $locationObj = new SmartIpLocation();
        $location = $locationObj->get('city') . ', ' . $locationObj->get('country') . '(' . $locationObj->get('countryCode') . ')';
        $entity->set('field_advert_creator_location', $location);
    }
}

function generateRandomStr() {
    $randomPart = '';
    srand((double) microtime(TRUE) * 1000000);
    $chars = [
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      'A',
      'B',
      'C',
      'D',
      'E',
      'F',
      'G',
      'H',
      'I',
      'J',
      'K',
      'L',
      'M',
      'N',
      'O',
      'P',
      'Q',
      'R',
      'S',
      'T',
      'U',
      'V',
      'W',
      'X',
      'Y',
      'Z',
    ];

    for ($rand = 0; $rand <= 9; $rand++) {
        $random = rand(0, count($chars) - 1);
        $randomPart .= $chars[$random];
    }
    return $randomPart;
}

/**
 * Implements hook_theme().
 */
function rir_interface_theme($existing, $type, $theme, $path) {
    $rent = Drupal::entityQuery('node')
      ->condition('type', 'advert')
      ->condition('field_advert_type', ['rent', 'short_rent'], 'IN')
      ->count();
    $rent_count = $rent->execute();

    $sale = Drupal::entityQuery('node')
      ->condition('type', 'advert')
      ->condition('field_advert_type', 'buy', 'IN')
      ->count();
    $sale_count = $sale->execute();

    $agents = Drupal::entityQuery('node')
      ->condition('type', 'agent')
      ->count();
    $agents_count = $agents->execute();

    $advert = Drupal::routeMatch()->getParameter('node');
    return [
      'rir_copyright' => [
        'variables' => [
          'year' => date('Y'),
          'terms' => t('Terms of use'),
          'privacy' => t('Privacy policy'),
          'admin' => t('Site Management'),
        ],
      ],
      'rir_address' => [
        'variables' => [
          'title' => t('Get in touch'),
        ],
      ],
      'rir_services' => [
        'variables' => [
          'title' => t('Our services'),
        ],
      ],
      'rir_realtime' => [
        'variables' => [
          'title' => t('Realtime Figures'),
          'rent' => $rent_count,
          'sale' => $sale_count,
          'agents' => $agents_count,
        ],
      ],
      'rir_advert_details' => [
        'variables' => [
          'advert' => Node::load($advert->id()),
        ],
      ],
    ];
}

/**
 * Implements hook_entity_presave().
 */
function rir_interface_entity_presave(EntityInterface $entity) {
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        if ($entity->get('field_advert_currency')->value == 'usd') {
            $response = Unirest\Request::get("https://currency-exchange.p.mashape.com/exchange?from=USD&q=1.0&to=RWF",
              [
                "X-Mashape-Key" => "G9T1txjJzbmshj9pPAEB2d0k79G5p1m3Xjgjsn5PO0gQ09UvDw",
                "Accept" => "text/plain",
              ]
            )->body;
            $converted = $entity->get('field_advert_price')->value * $response;
            $entity->set('field_price_in_rwf', $converted);
        }
        else {
            $entity->set('field_price_in_rwf', $entity->get('field_advert_price')->value);
        }
    }
}