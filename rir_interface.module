<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Database\StatementInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\rir_interface\Utils\Constants;
use Drupal\smart_ip\SmartIpLocation;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;



/**
 * Implements hook_entity_create().
 */
function rir_interface_entity_create(EntityInterface $entity)
{
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        $targetPrId = Drupal::request()->get('advert_target_pr');
        if (isset($targetPrId) && intval($targetPrId) > 0) {
            $entity->set('field_target_pr_id', intval($targetPrId));
        }

        $queryString = Drupal::request()->getQueryString();
        $params = explode('&', $queryString);
        foreach ($params as $param) {
            $assocParam = explode('=', $param);
            if ($assocParam[0] == 'field_advert_posting_plan') {
                $entity->set('field_advert_posting_plan', $assocParam[1]);
            }
        }
    }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function rir_interface_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{
    Drupal::logger('rir_interface')->info('Node ' . $entity->id() . ' | mode ' . $view_mode);
    if ($view_mode == 'full'
        and $entity instanceof NodeInterface
        and $entity->bundle() == 'advert') {
        if ($entity->get('field_advert_type')->value == 'auction'
            and isset($entity->get('field_advert_type')->value)
            and intval($entity->get('field_bid_is_online')->value) == 1 ) {
            Drupal::messenger()->addStatus("End date: " . $entity->get('field_bid_expiration')->value);
        }
    }
}

/**
 * Implements hook_entity_insert().
 */
function rir_interface_entity_insert(EntityInterface $entity)
{

    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        Drupal::cache('render')->deleteAll();

        $cc_recipients = $entity->get('field_visit_email_address1')->value;
        if (isset($entity->get('field_visit_email_address2')->value) and !empty($entity->get('field_visit_email_address2')->value)) {
            $cc_recipients .= ',' . $entity->get('field_visit_email_address2')->value;
        }
        $cc_recipients .= ',' . Drupal::config('system.site')->get('mail');

        $mailManager = Drupal::service('plugin.manager.mail');
        $module = 'rir_interface';
        $key = 'advert_insert_alert';
        $to = $entity->get('field_advert_contact_email')->value;
        $reply = Drupal::config('system.site')->get('mail');
        $params['cc'] = $cc_recipients;
        $params['message'] = Markup::create(getEmailHtmlContent('advert_received', $entity));
        $params['advert_title'] = $entity->label();
        $params['contact_name'] = $entity->get('field_visit_contact_name')->value;

//        $attachments = get_email_attachment_files();
//        $params['attachments'][] = $attachments[0];
//        $params['attachments'][] = $attachments[1];

        $langcode = Drupal::currentUser()->getPreferredLangcode();
        $send = TRUE;
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, $reply, $send);
        if (intval($result['result']) !== 1) {
            $message = t('There was a problem sending notification email to @email for creating advert id: @id.', [
                '@email' => $to,
                '@id' => $entity->id(),
            ]);
            Drupal::logger('rir_interface')->error($message);
        } else {
            $message = t('An email notification has been sent to @email for creating advert id: @id.', [
                '@email' => $to,
                '@id' => $entity->id(),
            ]);
            Drupal::logger('rir_interface')->notice($message);
        }

        /**
         * Set this advert to target PR if any
         */
        $prId = $entity->get('field_target_pr_id')->value;
        if (isset($prId) && intval($prId) > 0) {
            $advertsService = Drupal::service('rir_interface.adverts_service');
            $advertsService->setProposedAdvertOnPR($entity->id(), $prId);
        }

    } elseif ($entity instanceof NodeInterface and $entity->bundle() == 'agent') {
        $mailManager = Drupal::service('plugin.manager.mail');
        $module = 'rir_interface';
        $key = 'agent_insert_alert';
        $to = $entity->get('field_agent_email')->value;
        $reply = Drupal::config('system.site')->get('mail');
        $params['cc'] = $reply;
        $params['message'] = Markup::create(getEmailHtmlContent('agent_received', $entity));

//        $attachments = get_email_attachment_files();
//        $params['attachments'][] = $attachments[0];
//        $params['attachments'][] = $attachments[1];

        $langcode = Drupal::currentUser()->getPreferredLangcode();
        $send = TRUE;
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, $reply, $send);
        if (intval($result['result']) !== 1) {
            $message = t('There was a problem sending notification email to @email after creating agent id: @id', [
                '@email' => $to,
                '@id' => $entity->id(),
            ]);
            Drupal::logger('rir_interface')->error($message);
            return;
        }
        $message = t('An email notification has been sent to @email for creating agent id: @id.', [
            '@email' => $to,
            '@id' => $entity->id(),
        ]);
        Drupal::logger('rir_interface')->notice($message);
    }
}

/**
 * Implements hook_entity_update().
 */
function rir_interface_entity_update(EntityInterface $entity)
{
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {
        Drupal::cache('render')->deleteAll();

        /**
         * Send validation notification on first publishing
         */
        $is_first_published = $entity->get('field_advert_is_first_published')->value;
        $is_original_first_published = $entity->original->get('field_advert_is_first_published')->value;

        if (isset($is_first_published)
            and isset($is_original_first_published)
            and intval($is_first_published) === Node::PUBLISHED
            and intval($is_original_first_published) === Node::NOT_PUBLISHED) {

            $emailService = Drupal::service('rir_interface.email_service');
            $data = (object)[
                'notificationType' => Constants::ADVERT_VALIDATED,
                'entity' => $entity
            ];
            $emailService->send($data);

            $pr_data = (object)[
                'notificationType' => Constants::ADVERT_VALIDATED_NOTIFY_PR,
                'entity' => $entity
            ];
            $emailService->send($pr_data);
        }
    }

    if ($entity instanceof NodeInterface and $entity->bundle() == 'agent') {
        if (!$entity->isPublished()) {
            $agentService = Drupal::service('rir_interface.agent_service');
            $adverts = $agentService->loadAdverts($entity->id());
            if (count($adverts) > 0) {
                foreach ($adverts as $advert) {
                    $advert->setPublished(FALSE);
                    $advert->save();
                }
            }
        }
    }

    if ($entity instanceof NodeInterface and $entity->bundle() == 'property_request') {
        $proposedAdverts = array_udiff(
            $entity->field_pr_proposed_properties->referencedEntities(),
            $entity->original->field_pr_proposed_properties->referencedEntities(),
            function ($new, $original) {
                return $new->id() - $original->id();
            });
        if (isset($proposedAdverts) && count($proposedAdverts) > 0) {
            $data = (object)[
                'notificationType' => Constants::PROPOSED_ADVERTS_TO_PR,
                'pr' => $entity,
                'adverts' => $proposedAdverts
            ];
            $emailService = Drupal::service('rir_interface.email_service');
            $emailService->send($data);
        }
    }
}

function generateRandomStr()
{
    $randomPart = '';
    srand((double)microtime(TRUE) * 1000000);
    $chars = [
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        'A',
        'B',
        'C',
        'D',
        'E',
        'F',
        'G',
        'H',
        'I',
        'J',
        'K',
        'L',
        'M',
        'N',
        'O',
        'P',
        'Q',
        'R',
        'S',
        'T',
        'U',
        'V',
        'W',
        'X',
        'Y',
        'Z',
    ];

    for ($rand = 0; $rand <= 9; $rand++) {
        $random = rand(0, count($chars) - 1);
        $randomPart .= $chars[$random];
    }
    return $randomPart;
}

/**
 * Implements hook_theme().
 */
function rir_interface_theme($existing, $type, $theme, $path)
{

    return [
        'rir_copyright' => [
            'variables' => [
                'year' => date('Y'),
                'terms' => t('Terms of use'),
                'privacy' => t('Privacy policy'),
                'admin' => t('Site Management'),
            ],
        ],
        'rir_address' => [
            'variables' => [
                'title' => t('Get in touch')
            ],
        ],
        'rir_services' => [
            'variables' => [
                'title' => t('Our services'),
            ],
        ],
        'rir_realtime' => [
            'variables' => [
                'title' => t('Realtime Figures'),
                'rent' => 0,
                'sale' => 0,
                'agents' => 0,
                'auctions' => 0,
                'prs' => 0
            ],
        ],
        'rir_advert_details' => [
            'variables' => [
                'advert' => NULL,
            ],
        ],
        'hir_create_agent' => [
            'variables' => [],
        ],
        'hir_management_page' => [
            'variables' => [],
        ],
        'hir_like_buttons' => [
            'variables' => [],
        ],
        'hir_similar_adverts' => [
            'variables' => [
                'title' => t('Similar adverts'),
                'adverts' => []
            ],
        ],
    ];
}

/**
 * Implements hook_entity_presave().
 */
function rir_interface_entity_presave(EntityInterface $entity)
{
    if ($entity instanceof NodeInterface and $entity->bundle() == 'advert') {

        /**
         * In case of new entity: Set advert reference and creator location
         */
        if ($entity->isNew()) {
            $entity->set('field_advert_reference', generateRandomStr());

            $locationObj = new SmartIpLocation();
            $location = $locationObj->get('city') . ', ' . $locationObj->get('country') . '(' . $locationObj->get('countryCode') . ')';
            $entity->set('field_advert_creator_location', $location);
        }

        /**
         * Update address signature
         */
        $term = Term::load($entity->get('field_advert_district')->target_id);
        $district = str_replace(' ', '', strtolower($term->getName()));
        $sector = str_replace(' ', '', strtolower($entity->get('field_advert_sector')->value));
        $village = str_replace(' ', '', strtolower($entity->get('field_advert_village')->value));
        $cell = str_replace(' ', '', strtolower($entity->get('field_advert_cell')->value));
        $street = str_replace(' ', '', strtolower($entity->get('field_advert_street')->value));
        if (!empty($district) and !empty($sector) and !empty($village) and !empty($cell) and !empty($street)) {
            $signature = hash('md5', $district . '_' . $sector . '_' . $village . '_' . $cell . '_' . $street);
            $entity->set('field_advert_signature', $signature);
        } else {
            $entity->set('field_advert_signature', '');
        }

        /**
         * Update price in RWF
         */
        if ($entity->get('field_advert_currency')->value == 'usd') {
            $response = Unirest\Request::get("https://free.currencyconverterapi.com/api/v5/convert?q=USD_RWF&compact=ultra");
            $converted = $entity->get('field_advert_price')->value * Drupal::state()->get(Constants::USD_RWF_EXCHANGE_RATE);
            if ($response->code === 200) {
                Drupal::state()->set(Constants::USD_RWF_EXCHANGE_RATE, $response->body->USD_RWF);
                $converted = $entity->get('field_advert_price')->value * $response->body->USD_RWF;
            } else {
                Drupal::logger('rir_interface')->error('Currency Converter Error. Response Code: ' . $response->code . ' Advert NID: ' . $entity->id());
            }
            $entity->set('field_price_in_rwf', $converted);
        } else {
            $entity->set('field_price_in_rwf', $entity->get('field_advert_price')->value);
        }

        /**
         * Check if advert is expired and trying to publish
         */
        $today = DateTime::createFromFormat('Y-m-d', date('Y-m-d', strtotime('now')));
        $expiry_date = DateTime::createFromFormat('Y-m-d', $entity->get('field_advert_expirydate')->value);
        if ($expiry_date < $today and intval($entity->get('status')->value) === Node::PUBLISHED) {
            $entity->set('status', Node::NOT_PUBLISHED);
            Drupal::logger('rir_interface')->warning('Publishing failed: The advert cannot be published because it is expired!');
        }

        /**
         * Check if agent is published
         */
        if (intval($entity->get('field_advert_is_agent')->value) === 1
            and intval($entity->get('field_advert_advertiser')->entity->get('status')->value) === Node::NOT_PUBLISHED
            and intval($entity->get('status')->value) === Node::PUBLISHED) {
            $entity->set('status', Node::NOT_PUBLISHED);
            Drupal::logger('rir_interface')->warning('Publishing failed: The agent of this advert is not published!');
        }

        /**
         * Set visit email if empty
         */

        if (!isset($entity->get('field_visit_email_address1')->value)) {
            $entity->set('field_visit_email_address1', Drupal::config('system.site')
                ->get('mail'));
        }

        /**
         * Send notification if published for the first time
         */
        if (isset($entity->get('field_advert_is_first_published')->value)
            and intval($entity->get('field_advert_is_first_published')->value) === Node::NOT_PUBLISHED
            and intval($entity->get('status')->value) === Node::PUBLISHED) {

            $entity->set('field_advert_is_first_published', Node::PUBLISHED);
        }
    }
}

/**
 * Implements hook_views_query_alter().
 */
function rir_interface_views_query_alter(ViewExecutable $view, QueryPluginBase $query)
{
    if ($view->storage->get('id') === 'adverts') {
        if (in_array($view->current_display, [
            'block_advert_carousel',
            'block_advert_images_thumbnails',
        ])) {
            $node = Drupal::routeMatch()->getParameter('node');
            if (isset($node)) {
                // Sort images as the are arranged in the edit page
                $query->orderby[1] = array(
                    'field' => 'node__field_advert_picture.delta',
                    'description' => 'ASC'
                );
                // Limit number of images by posting plan
                $advert = Node::load($node->id());
                if ($advert->get('field_advert_posting_plan')->value === 'standard') {
                    $query->setLimit(10);
                }
            }
        } elseif ($view->current_display == 'page_manage_adverts') { // Remove this when date granularity is available in views filters
            foreach ($query->where as &$condition_group) {
                foreach ($condition_group['conditions'] as &$condition) {
                    if (strpos($condition['field'], 'node_field_data.created') !== FALSE) {
                        $created_param = Drupal::request()->query->get('created');
                        $from = strtotime($created_param . 'T00:00:00');
                        $to = strtotime($created_param . 'T23:59:59');
                        if ($from !== FALSE and $to !== FALSE) {
                            $condition['field'] = 'node_field_data.created';
                            $condition['value'] = [$from, $to];
                            $condition['operator'] = 'BETWEEN';
                        }
                    } elseif (strpos($condition['field'], 'node__field_advert_expirydate.field_advert_expirydate_value') !== FALSE) {
                        $expiry_param = Drupal::request()->query->get('field_advert_expirydate_value');
                        $expiry_date = strtotime($expiry_param);
                        if ($expiry_date !== FALSE) {
                            $condition['field'] = "node__field_advert_expirydate.field_advert_expirydate_value";
                            $condition['value'] = [$expiry_param];
                            $condition['operator'] = '=';
                        }
                    }
                }
            }
        }
    }
}

function getEmailHtmlContent($email_type, $emailPayload, $recipientName = NULL, $options = array())
{
    $template_path = '';
    $variables = [];
    $twig_service = Drupal::service('twig');
    switch ($email_type) {
        case 'advert_validated':
            if ($emailPayload instanceof NodeInterface) {
                $langcode = Drupal::languageManager()->getDefaultLanguage()->getId();
                $nodePath = Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $emailPayload->id(), $langcode);
                Drupal::logger('rir_interface')->warning('Langcode : ' . $langcode . '|Node path: ' . $nodePath);
                if ($nodePath == '/node/' . $emailPayload->id()) {
                    $connection = Drupal::database();
                    $result = $connection->select('url_alias', 'al')
                        ->fields('al', ['alias'])
                        ->condition('source', '/node/' . $emailPayload->id())
                        ->execute();
                    if ($result and $result instanceof StatementInterface) {
                        Drupal::logger('rir_interface')->debug('Query string: ' . $result->getQueryString());
                        while ($row = $result->fetchAssoc()) {
                            Drupal::logger('rir_interface')->debug('Query not empty: ' . $row['alias']);
                            $nodePath = $row['alias'];
                        }
                    }
                }
                $variables = [
                    'advert' => $emailPayload,
                    'advert_url' => Drupal::request()->getSchemeAndHttpHost() . $nodePath,
                ];
                $template_path = '/templates/hir-advert-validated.html.twig';
            }
            break;
        case 'advert_received':
            $variables = [
                'advert' => $emailPayload,
                'phone' => Drupal::config('system.site')->get('phone'),
            ];
            $template_path = '/templates/hir-advert-received.html.twig';
            break;
        case 'agent_received':
            $variables = [
                'agent' => $emailPayload,
            ];
            $template_path = '/templates/hir-agent-received.html.twig';
            break;
        case 'advert_validated_notify_pr':
            $variables = [
                'adverts' => array($emailPayload),
                'recipient' => $recipientName,
                'prId' => $options['prId']
            ];
            $template_path = '/templates/hir-propose-adverts-pr.html.twig';
            break;
        case Constants::PROPOSED_ADVERTS_TO_PR:
            $variables = [
                'adverts' => $emailPayload,
                'recipient' => $recipientName,
                'prId' => $options['prId']
            ];
            $template_path = '/templates/hir-propose-adverts-pr.html.twig';
            break;

    }
    return $twig_service->loadTemplate(drupal_get_path('module', 'rir_interface') . $template_path)
        ->render($variables);
}


/**
 * Implements hook_mail().
 */
function rir_interface_mail($key, &$message, $params)
{
    $options = [
        'langcode' => $message['langcode'],
    ];

    switch ($key) {
        case 'advert_insert_alert':
            $message['from'] = Drupal::config('system.site')
                    ->get('name') . ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['headers']['Cc'] = $params['cc'];
            $message['subject'] = t('Your advert was posted on @site', [
                '@site' => Drupal::config('system.site')->get('name'),
            ], $options);
            $message['params']['files'] = $params['attachments'];
            $message['body'][] = $params['message'];
            break;
        case 'advert_first_published':
            $message['from'] = Drupal::config('system.site')
                    ->get('name') . ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['headers']['Cc'] = $params['cc'];
            $message['subject'] = t('Your advert at @site has been validated', [
                '@site' => Drupal::config('system.site')->get('name'),
            ], $options);
            $message['params']['files'] = $params['attachments'];
            $message['body'][] = $params['message'];
            break;
        case 'agent_insert_alert':
            $message['from'] = Drupal::config('system.site')
                    ->get('name') . ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['headers']['Cc'] = $params['cc'];
            $message['subject'] = t('Confirmation: Your profile was created on  @site', [
                '@site' => Drupal::config('system.site')->get('name'),
            ], $options);
            $message['params']['files'] = $params['attachments'];
            $message['body'][] = $params['message'];
            break;
        case 'expiring_adverts_alert':
            $message['from'] = Drupal::config('system.site')
                    ->get('name') . ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['subject'] = t('Alert: Adverts expiring today', $options);
            $message['body'][] = $params['message'];
            break;
        case Constants::ADVERT_VALIDATED_NOTIFY_PR:
            $message['from'] = Drupal::config('system.site')->get('name') .
                ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['headers']['Cc'] = $params['cc'];
            $message['subject'] = t('Interesting advert from @siteName', array_merge(array('@siteName' => $message['from']), $options));
            $message['body'][] = $params['message'];
            break;
        case Constants::PROPOSED_ADVERTS_TO_PR:
            $message['from'] = Drupal::config('system.site')->get('name') .
                ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['headers']['Cc'] = $params['cc'];
            $message['subject'] = t('Interesting advert from @siteName', array_merge(array('@siteName' => $message['from']), $options));
            $message['body'][] = $params['message'];
            break;
        case 'send_campaign_email':
            $message['from'] = Drupal::config('system.site')->get('name') .
                ' <' . Drupal::config('system.site')->get('mail') . '>';
            $message['subject'] = t('Interesting adverts from @siteName', array_merge(array('@siteName' => $message['from']), $options));
            $message['body'][] = $params['message'];
            break;
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rir_interface_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id)
{

    $form['site_phone'] = [
        '#type' => 'tel',
        '#title' => t('Site phone'),
        '#default_value' => Drupal::config('system.site')->get('phone'),
    ];
    $form['#submit'][] = 'rir_interface_site_information_phone_submit';
}

/**
 * Form callback to save site phone
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 */
function rir_interface_site_information_phone_submit(array &$form, FormStateInterface $formState)
{
    $config = Drupal::configFactory()->getEditable('system.site');
    $config->set('phone', $formState->getValue('site_phone'))->save();
}

/**
 * Implements hook_form_alter().
 */
function rir_interface_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    switch ($form_id) {
        case 'views_exposed_form':
            $view = $form_state->get('view');
            if ($view->storage->id() == 'adverts' and $view->current_display == 'page_manage_adverts') {
                $form['created'] = ['#type' => 'date'];
                $form['field_advert_expirydate_value'] = ['#type' => 'date'];
            }
            break;
    }
}

/**
 * Implements hook_token_info().
 */
function rir_interface_token_info()
{
    $type = [
        'name' => t('Custom Hir Tokens'),
        'description' => t('Additional custom Hir Tokens.'),
    ];

    $tokens['phone'] = array(
        'name' => t('Site Telephone'),
        'description' => t('Telephone number of the site')
    );

    return array(
        'types' => ['custom_token' => $type],
        'tokens' => ['custom_token' => $tokens]
    );
}

/**
 * Implements hook_tokens().
 */
function rir_interface_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata)
{
    $replacements = array();
    if($type == 'custom_token') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'phone':
                    $text = Drupal::config('system.site')->get('phone');
                    $replacements[$original] = $text;
                    break;
            }
        }
    }
    return $replacements;
}

/**
 * Implements hook_page_top().
 */
function rir_interface_page_top(array &$page_top)
{
//    array_push($page_top, '<span id="geolocation-google-places-api-attribution"></span>');
//    kint($page_top);
}

function get_email_attachment_files()
{
    $file1 = new stdClass();
    $file1->uri = 'sites/default/files/email_attachments/Advertisement_ServiceCard.pdf';
    $file1->filename = 'Advertisement_ServiceCard.pdf';
    $file1->filemime = 'application/pdf';

    $file2 = new stdClass();
    $file2->uri = 'sites/default/files/email_attachments/HiR_Profile_v2.pdf';
    $file2->filename = 'HiR_Profile_v2.pdf';
    $file2->filemime = 'application/pdf';

    $file3 = new stdClass();
    $file3->uri = 'sites/default/files/email_attachments/Professional_Subscription_Service.pdf';
    $file3->filename = 'Professional_Subscription_Service.pdf';
    $file3->filemime = 'application/pdf';

    return array($file1, $file2, $file3);
}